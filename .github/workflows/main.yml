name: Build, Publish, and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            RID: linux-x64
          - os: windows-latest
            RID: win-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'  # 使用你项目所需的 .NET SDK 版本

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet publish -c Release -r ${{ matrix.RID }} --self-contained

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-build
        path: |
          **/bin/Release/net8.0/${{ matrix.RID }}/publish/

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download Linux artifact
      if: always() && matrix.os == 'ubuntu-latest'
      uses: actions/download-artifact@v3
      with:
        name: ubuntu-latest-build
        path: ./build/linux

    - name: Download Windows artifact
      if: always() && matrix.os == 'windows-latest'
      uses: actions/download-artifact@v3
      with:
        name: windows-latest-build
        path: ./build/windows

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset - Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/linux
        asset_name: linux-x64
        asset_content_type: application/zip

    - name: Upload Release Asset - Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/windows
        asset_name: win-x64
        asset_content_type: application/zip
